{"version":3,"sources":["assets/unavailable-image.jpg","utilities/api.js","actions/movieActions.js","components/navbar/Navbar.js","actions/types.js","components/results/Movie.js","components/results/Results.js","components/app/RootContainer.js","reducers/movieReducer.js","reducers/index.js","store.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","baseURL","process","title","a","titleQuery","endpointUrl","fetch","catch","error","response","json","data","Response","Error","Search","amount","movies","length","randomIntInRange","getRandomInt","IdQuery","push","min","max","Math","ceil","floor","random","Navbar","props","state","onChange","bind","onSubmit","event","this","setState","target","name","value","preventDefault","fetchMovies","className","type","placeholder","color","fontSize","Component","connect","dispatch","getMovies","then","payload","Movie","onClick","onError","id","onerror","src","unavailableImage","poster","alt","year","Results","deleteMovie","index","movieItems","map","movie","key","Poster","Title","Year","RootContainer","fetchRandomMovies","clipLoader","css","override","size","loading","isLoading","getRandomMovies","initialState","userSearched","combineReducers","action","filter","_","middlware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0cb73b60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unavailable-image.2347b06b.jpg\";","const API_KEY = process.env.REACT_APP_OMDB_API_KEY;\nconst baseURL = `http://www.omdbapi.com/?apikey=${API_KEY}&`\n\nexport async function getMovies(title) {\n  const titleQuery = `&s=${title}`;\n  const endpointUrl = baseURL + titleQuery;\n\n  let response = await fetch(endpointUrl).catch(error => {\n    throw error;\n  });\n\n  let data = await response.json();\n  if (data.Response === \"False\") {\n    throw data.Error;\n  }\n\n  return data.Search;\n};\n\nexport async function getRandomMovies(amount) {\n\n  const movies = [];\n\n  while (movies.length < amount) {\n    const randomIntInRange = getRandomInt(1000000, 3135392);\n    const IdQuery = `&i=tt${randomIntInRange}`;\n    const endpointUrl = baseURL + IdQuery;\n\n    let response = await fetch(endpointUrl).catch(error => {\n      throw error;\n    });\n\n    let data = await response.json();\n    if (data.Response === \"False\") {\n      continue;\n    }\n\n    movies.push(data);\n  }\n\n  return movies;\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","import { \n  USER_SEARCHED, MOVIE_REQUESTED, MOVIE_RECEIVED, \n  RANDOM_MOVIE_RECEIVED, MOVIE_FAILED, DELETE_MOVIE \n} from './types';\nimport { getMovies, getRandomMovies } from '../utilities/api';\n\nexport const fetchMovies = (title) => dispatch => {\n  dispatch({\n    type: USER_SEARCHED,\n  });\n\n  dispatch({\n    type: MOVIE_REQUESTED,\n  });\n\n  getMovies(title).then(data => dispatch({\n    type: MOVIE_RECEIVED,\n    payload: data,\n  })).catch(error => dispatch({\n    type: MOVIE_FAILED,\n    payload: error\n  }));\n};\n\nexport const fetchRandomMovies = (amount) => dispatch => {\n  dispatch({\n    type: MOVIE_REQUESTED,\n  });\n  \n  getRandomMovies(amount).then(data => dispatch({\n    type: RANDOM_MOVIE_RECEIVED,\n    payload: data,\n  })).catch(error => dispatch({\n    type: MOVIE_FAILED,\n    payload: error\n  }));\n}\n\nexport const deleteMovie = (index) => dispatch => {\n  dispatch({\n    type: DELETE_MOVIE,\n    payload: index\n  });\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport SearchIcon from 'react-ionicons/lib/MdSearch';\n\nimport { fetchMovies } from '../../actions/movieActions';\nimport './Navbar.css';\n\nclass Navbar extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: ''\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n\n    const title = this.state.title\n    if (title) {\n      this.props.fetchMovies(title);\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"Navbar\">\n        <div className=\"container-max-width\">\n            <div className=\"container-search\">\n              <form onSubmit={this.onSubmit}>\n                <input \n                  type=\"text\" \n                  name=\"title\"\n                  onChange={this.onChange}\n                  value={this.state.title} \n                  placeholder=\"Type a movie to search...\" \n                />\n                <button type=\"search\">\n                  <SearchIcon color=\"#fff\" fontSize=\"30px\" />\n                </button>\n              </form>\n            </div>\n        </div>\n      </div>\n    )\n  };\n}\n\nNavbar.propTypes = {\n  fetchMovies: PropTypes.func.isRequired\n}\n\nexport default connect(null, { fetchMovies })(Navbar);\n","export const USER_SEARCHED = \"USER_SEARCHED\";\nexport const MOVIE_REQUESTED = \"MOVIE_REQUESTED\";\nexport const RANDOM_MOVIE_RECEIVED = \"RANDOM_MOVIE_RECEIVED\";\nexport const MOVIE_RECEIVED = \"MOVIE_RECEIVED\";\nexport const MOVIE_FAILED = \"MOVIE_FAILED\";\nexport const DELETE_MOVIE = \"DELETE MOVIE\";","import React, { Component } from 'react';\nimport CloseIcon from 'react-ionicons/lib/MdClose';\n\nimport unavailableImage from '../../assets/unavailable-image.jpg'\nimport './Movie.css';\n\nclass Movie extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n    this.onError = this.onError.bind(this);\n  }\n\n  onClick(event) {\n    event.preventDefault();\n    this.props.onClick(this.props.id);\n  }\n\n  onError(event) {\n    event.target.onerror = null;\n    event.target.src = unavailableImage;\n  }\n\n  render() {\n    return (\n      <div className=\"Movie\">\n        <div className=\"item\">\n          <img src={this.props.poster} onError={this.onError} alt=\"poster\" />\n          <CloseIcon className=\"icon\" onClick={this.onClick} color=\"#ff443a\" fontSize=\"20px\" />\n          <div className=\"container-placeholder\"></div>\n          <div className=\"container-text\">\n            <h1>{this.props.title}</h1>\n            <h2>{this.props.year}</h2>\n          </div>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { deleteMovie } from '../../actions/movieActions';\nimport Movie from './Movie';\nimport './Results.css';\n\nclass Results extends Component {\n\n  constructor(props) {\n    super(props);\n    this.deleteMovie = this.deleteMovie.bind(this);\n  }\n\n  deleteMovie(index) {\n    this.props.deleteMovie(index);\n  }\n\n  render() {\n    const movieItems = this.props.movies.map((movie, index) => (\n      <Movie \n      key={index}\n      id={index}\n      poster={movie.Poster}\n      title={movie.Title}\n      year={movie.Year}\n      onClick={this.deleteMovie}/>\n    ));\n\n    return (\n      <div className=\"Results container-max-width\">\n        <div className=\"grid-row\">\n          {movieItems}\n        </div>\n      </div>\n    )\n  };\n}\n\nResults.propTypes = {\n  movies: PropTypes.array.isRequired,\n  deleteMovie: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  movies: state.data.movies\n})\n\nexport default connect(mapStateToProps, { deleteMovie })(Results);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { css } from '@emotion/core';\nimport ClipLoader from 'react-spinners/BarLoader'\n\nimport Navbar from '../navbar/Navbar';\nimport Results from '../results/Results';\nimport { fetchRandomMovies } from '../../actions/movieActions';\n\nclass RootContainer extends Component {\n\n  componentDidMount() {\n    this.props.fetchRandomMovies(10);\n  }\n\n  render() {\n    const clipLoader = \n    <div className=\"container-loader container-max-width\">\n      <ClipLoader css={override} size={25} color={'#2f8be6'} loading={this.props.isLoading} />\n    </div>\n\n    return (\n      <div className=\"RootContainer\">\n        <header>\n          <Navbar />\n        </header>\n\n        <section>\n          {clipLoader}\n          <Results />\n        </section>\n      </div>\n    )\n  };\n}\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: white;\n  width: 100%;\n`;\n\nRootContainer.propTypes = {\n  fetchRandomMovies: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isLoading: state.data.isLoading,\n})\n\nexport default connect(mapStateToProps, { fetchRandomMovies })(RootContainer);\n","import { \n  USER_SEARCHED, MOVIE_REQUESTED, MOVIE_RECEIVED, \n  RANDOM_MOVIE_RECEIVED, MOVIE_FAILED, DELETE_MOVIE \n} from '../actions/types';\n\nconst initialState = {\n  isLoading: false,\n  userSearched: false,\n  movies: [],\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case USER_SEARCHED:\n      return {\n        ...state,\n        userSearched: true,\n      }\n    case MOVIE_REQUESTED:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case RANDOM_MOVIE_RECEIVED:\n      if (!state.userSearched) {\n        return {\n          ...state,\n          isLoading: false,\n          movies: action.payload\n        }\n      } else {\n        return {\n          ...state,\n          isLoading: false\n        }\n      }\n    case MOVIE_RECEIVED:\n      return {\n        ...state,\n        isLoading: false,\n        movies: action.payload\n      }\n    case MOVIE_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      }\n    case DELETE_MOVIE:\n      return {\n        ...state,\n        movies: state.movies.filter((_, index) => action.payload !== index)\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux';\nimport movieReducer from './movieReducer'\n\nexport default combineReducers({\n  data: movieReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middlware = [thunk];\n\nconst store = createStore(\n    rootReducer, \n    initialState,\n    compose( \n        applyMiddleware(...middlware),\n        //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\n\nimport RootContainer from './RootContainer';\nimport store from '../../store';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <RootContainer />\n      </Provider>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}