{"version":3,"sources":["components/navbar/Navbar.js","actions/postActions.js","actions/types.js","components/results/Movie.js","components/results/Results.js","reducers/postReducer.js","reducers/index.js","store.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Navbar","props","state","title","onChange","bind","onSubmit","e","this","setState","target","name","value","preventDefault","post","createPost","className","type","placeholder","Component","connect","postData","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","payload","Movie","Results","fetchPosts","nextProps","newPost","posts","unshift","movieItems","map","key","id","items","item","initialState","combineReducers","action","middlware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efe185ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createPost } from '../../actions/postActions';\nimport './Navbar.css';\n\nclass Navbar extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: ''\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const post = {\n      title: this.state.title\n    }\n\n    this.props.createPost(post);\n  }\n\n  render() {\n    return (\n      <div className=\"Navbar\">\n        <div className=\"container-max-width\">\n            <div className=\"container-search\">\n              <form onSubmit={this.onSubmit}>\n                <input \n                  type=\"text\" \n                  name=\"title\"\n                  onChange={this.onChange}\n                  value={this.state.title} \n                  placeholder=\"Type something to search...\" \n                />\n                <button type=\"search\">Search</button>\n              </form>\n            </div>\n        </div>\n      </div>\n    )\n  };\n}\n\nNavbar.propTypes = {\n  createPost: PropTypes.func.isRequired\n}\n\nexport default connect(null, { createPost })(Navbar);\n","import { FETCH_POSTS, NEW_POST } from './types';\n\nexport const fetchPosts = () => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(res => res.json())\n        .then(posts => dispatch({\n            type: FETCH_POSTS,\n            payload: posts\n        })\n    );\n};\n\nexport const createPost = (postData) => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(post => dispatch({\n            type: NEW_POST,\n            payload: post \n        }));\n};","export const FETCH_POSTS = \"FETCH_POSTS\";\nexport const NEW_POST = \"NEW_POST\";\n","import React, { Component } from 'react';\nimport './Movie.css';\n\nclass Movie extends Component {\n  render() {\n    return (\n      <div className=\"Movie\">\n        <div className=\"item\">\n          <h3>{this.props.title}</h3>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchPosts } from '../../actions/postActions';\nimport Movie from './Movie';\nimport './Results.css';\n\nclass Results extends Component {\n\n  componentWillMount() {\n    this.props.fetchPosts()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.newPost) {\n      this.props.posts.unshift(nextProps.newPost);\n    }\n  }\n\n  render() {\n    const movieItems = this.props.posts.map(post => (\n      <Movie key={post.id} title={post.title} body={post.body} />\n    ));\n\n    return (\n      <div className=\"Results container-max-width\">\n        <div className=\"grid-row\">\n          {movieItems}\n        </div>\n      </div>\n    )\n  };\n}\n\nResults.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  newPost: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts.items,\n  newPost: state.posts.item\n})\n\nexport default connect(mapStateToProps, { fetchPosts })(Results);\n","import { FETCH_POSTS, NEW_POST } from '../actions/types';\n\nconst initialState = {\n    items: [],\n    item: {}\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_POSTS:\n            return {\n                ...state,\n                items: action.payload\n            }\n        case NEW_POST:\n            return {\n                ...state,\n                item: action.payload\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\nimport postReducer from './postReducer'\n\nexport default combineReducers({\n    posts: postReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middlware = [thunk];\n\nconst store = createStore(\n    rootReducer, \n    initialState,\n    compose( \n        applyMiddleware(...middlware),\n        // TODO: Remove before deploying\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\n\nimport Navbar from '../navbar/Navbar';\nimport Results from '../results/Results';\nimport store from '../../store'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header>\n            <Navbar />\n          </header>\n\n          <section>\n            <Results />\n          </section>\n        </div>\n      </Provider>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}